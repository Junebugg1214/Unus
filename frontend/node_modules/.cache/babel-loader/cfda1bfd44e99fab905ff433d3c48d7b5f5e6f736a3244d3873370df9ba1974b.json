{"ast":null,"code":"import process from 'process';\nconst loadEnv = () => {\n  // Set default to 'development' if NODE_ENV is not set\n  const nodeEnv = process.env['NODE_ENV'] || 'development';\n  console.log(`Environment: ${nodeEnv}`);\n\n  // Verify essential environment variables\n  const requiredEnvVars = ['REACT_APP_API_URL', 'REACT_APP_API_TIMEOUT', 'REACT_APP_TOKEN_EXPIRY_DAYS'];\n\n  // Log an error if a required environment variable is missing\n  requiredEnvVars.forEach(envVar => {\n    if (!process.env[envVar]) {\n      console.error(`Warning: Missing required environment variable: ${envVar}`);\n    }\n  });\n\n  // Optionally, throw an error if critical variables are missing\n  const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);\n  if (missingEnvVars.length > 0) {\n    throw new Error(`Critical Error: Missing required environment variables: ${missingEnvVars.join(', ')}`);\n  }\n};\n\n// Load environment configuration\nloadEnv();\nexport default loadEnv;","map":{"version":3,"names":["process","loadEnv","nodeEnv","env","console","log","requiredEnvVars","forEach","envVar","error","missingEnvVars","filter","length","Error","join"],"sources":["C:/Users/marcs/unus/frontend/src/env.ts"],"sourcesContent":["import process from 'process';\r\n\r\nconst loadEnv = (): void => {\r\n  // Set default to 'development' if NODE_ENV is not set\r\n  const nodeEnv = process.env['NODE_ENV'] || 'development';\r\n  console.log(`Environment: ${nodeEnv}`);\r\n\r\n  // Verify essential environment variables\r\n  const requiredEnvVars = [\r\n    'REACT_APP_API_URL', \r\n    'REACT_APP_API_TIMEOUT', \r\n    'REACT_APP_TOKEN_EXPIRY_DAYS'\r\n  ] as const;\r\n\r\n  // Log an error if a required environment variable is missing\r\n  requiredEnvVars.forEach((envVar) => {\r\n    if (!process.env[envVar]) {\r\n      console.error(`Warning: Missing required environment variable: ${envVar}`);\r\n    }\r\n  });\r\n\r\n  // Optionally, throw an error if critical variables are missing\r\n  const missingEnvVars = requiredEnvVars.filter((envVar) => !process.env[envVar]);\r\n  if (missingEnvVars.length > 0) {\r\n    throw new Error(\r\n      `Critical Error: Missing required environment variables: ${missingEnvVars.join(', ')}`\r\n    );\r\n  }\r\n};\r\n\r\n// Load environment configuration\r\nloadEnv();\r\n\r\nexport default loadEnv;\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAE7B,MAAMC,OAAO,GAAGA,CAAA,KAAY;EAC1B;EACA,MAAMC,OAAO,GAAGF,OAAO,CAACG,GAAG,CAAC,UAAU,CAAC,IAAI,aAAa;EACxDC,OAAO,CAACC,GAAG,CAAC,gBAAgBH,OAAO,EAAE,CAAC;;EAEtC;EACA,MAAMI,eAAe,GAAG,CACtB,mBAAmB,EACnB,uBAAuB,EACvB,6BAA6B,CACrB;;EAEV;EACAA,eAAe,CAACC,OAAO,CAAEC,MAAM,IAAK;IAClC,IAAI,CAACR,OAAO,CAACG,GAAG,CAACK,MAAM,CAAC,EAAE;MACxBJ,OAAO,CAACK,KAAK,CAAC,mDAAmDD,MAAM,EAAE,CAAC;IAC5E;EACF,CAAC,CAAC;;EAEF;EACA,MAAME,cAAc,GAAGJ,eAAe,CAACK,MAAM,CAAEH,MAAM,IAAK,CAACR,OAAO,CAACG,GAAG,CAACK,MAAM,CAAC,CAAC;EAC/E,IAAIE,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAM,IAAIC,KAAK,CACb,2DAA2DH,cAAc,CAACI,IAAI,CAAC,IAAI,CAAC,EACtF,CAAC;EACH;AACF,CAAC;;AAED;AACAb,OAAO,CAAC,CAAC;AAET,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}