{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcs\\\\unus\\\\frontend\\\\src\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [clonedRepo, setClonedRepo] = useState(null);\n  const [inferenceResult, setInferenceResult] = useState('');\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      user,\n      setUser,\n      clonedRepo,\n      setClonedRepo,\n      inferenceResult,\n      setInferenceResult\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, children);\n};\n_s(AppProvider, \"MyVS38LmDbJhnV5LGskxZ3lkgAk=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","AppContext","undefined","AppProvider","children","_s","user","setUser","clonedRepo","setClonedRepo","inferenceResult","setInferenceResult","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/marcs/unus/frontend/src/AppContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface ClonedRepo {\r\n  repo_path: string;\r\n}\r\n\r\ninterface AppContextType {\r\n  user: User | null;\r\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\r\n  clonedRepo: ClonedRepo | null;\r\n  setClonedRepo: React.Dispatch<React.SetStateAction<ClonedRepo | null>>;\r\n  inferenceResult: string;\r\n  setInferenceResult: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | undefined>(undefined);\r\n\r\ninterface AppProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [clonedRepo, setClonedRepo] = useState<ClonedRepo | null>(null);\r\n  const [inferenceResult, setInferenceResult] = useState<string>('');\r\n\r\n  return (\r\n    <AppContext.Provider value={{ \r\n      user, \r\n      setUser, \r\n      clonedRepo, \r\n      setClonedRepo, \r\n      inferenceResult, \r\n      setInferenceResult \r\n    }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useApp = (): AppContextType => {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAoB7E,MAAMC,UAAU,gBAAGH,aAAa,CAA6BI,SAAS,CAAC;AAMvE,OAAO,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAoB,IAAI,CAAC;EACrE,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAElE,oBACEF,KAAA,CAAAe,aAAA,CAACX,UAAU,CAACY,QAAQ;IAACC,KAAK,EAAE;MAC1BR,IAAI;MACJC,OAAO;MACPC,UAAU;MACVC,aAAa;MACbC,eAAe;MACfC;IACF,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACChB,QACkB,CAAC;AAE1B,CAAC;AAACC,EAAA,CAjBWF,WAAuC;AAAAkB,EAAA,GAAvClB,WAAuC;AAmBpD,OAAO,MAAMmB,MAAM,GAAGA,CAAA,KAAsB;EAAAC,GAAA;EAC1C,MAAMC,OAAO,GAAGxB,UAAU,CAACC,UAAU,CAAC;EACtC,IAAIuB,OAAO,KAAKtB,SAAS,EAAE;IACzB,MAAM,IAAIuB,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,MAAM;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}