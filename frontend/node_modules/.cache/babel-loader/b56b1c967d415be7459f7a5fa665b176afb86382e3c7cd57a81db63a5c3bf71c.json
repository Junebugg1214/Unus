{"ast":null,"code":"import React,{createContext,useState,useContext}from'react';const AppContext=/*#__PURE__*/createContext(undefined);export const AppProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[clonedRepo,setClonedRepo]=useState(null);const[inferenceResult,setInferenceResult]=useState('');return/*#__PURE__*/React.createElement(AppContext.Provider,{value:{user,setUser,clonedRepo,setClonedRepo,inferenceResult,setInferenceResult}},children);};export const useApp=()=>{const context=useContext(AppContext);if(context===undefined){throw new Error('useApp must be used within an AppProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","AppContext","undefined","AppProvider","_ref","children","user","setUser","clonedRepo","setClonedRepo","inferenceResult","setInferenceResult","createElement","Provider","value","useApp","context","Error"],"sources":["C:/Users/marcs/unus/frontend/src/AppContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface ClonedRepo {\r\n  repo_path: string;\r\n}\r\n\r\ninterface AppContextType {\r\n  user: User | null;\r\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\r\n  clonedRepo: ClonedRepo | null;\r\n  setClonedRepo: React.Dispatch<React.SetStateAction<ClonedRepo | null>>;\r\n  inferenceResult: string;\r\n  setInferenceResult: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | undefined>(undefined);\r\n\r\ninterface AppProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [clonedRepo, setClonedRepo] = useState<ClonedRepo | null>(null);\r\n  const [inferenceResult, setInferenceResult] = useState<string>('');\r\n\r\n  return (\r\n    <AppContext.Provider value={{ \r\n      user, \r\n      setUser, \r\n      clonedRepo, \r\n      setClonedRepo, \r\n      inferenceResult, \r\n      setInferenceResult \r\n    }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useApp = (): AppContextType => {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAmB,OAAO,CAoB7E,KAAM,CAAAC,UAAU,cAAGH,aAAa,CAA6BI,SAAS,CAAC,CAMvE,MAAO,MAAM,CAAAC,WAAuC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACS,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAoB,IAAI,CAAC,CACrE,KAAM,CAACW,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAS,EAAE,CAAC,CAElE,mBACEF,KAAA,CAAAe,aAAA,CAACX,UAAU,CAACY,QAAQ,EAACC,KAAK,CAAE,CAC1BR,IAAI,CACJC,OAAO,CACPC,UAAU,CACVC,aAAa,CACbC,eAAe,CACfC,kBACF,CAAE,EACCN,QACkB,CAAC,CAE1B,CAAC,CAED,MAAO,MAAM,CAAAU,MAAM,CAAGA,CAAA,GAAsB,CAC1C,KAAM,CAAAC,OAAO,CAAGhB,UAAU,CAACC,UAAU,CAAC,CACtC,GAAIe,OAAO,GAAKd,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAe,KAAK,CAAC,2CAA2C,CAAC,CAC9D,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}