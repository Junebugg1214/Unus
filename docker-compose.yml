version: '3.8'

# Common configuration template
x-common-config: &common-config
  restart: unless-stopped
  networks:
    - unus_network
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

# Service Definitions
services:
  app:
    <<: *common-config
    image: mjsaintjour/unus:${APP_VERSION:-latest}
    container_name: unus_app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        PYTHON_ENV: production
    ports:
      - "8080:8080"  # Changed to match Dockerfile port
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - VIRTUAL_HOST=${DOMAIN}
      - LETSENCRYPT_HOST=${DOMAIN}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
      - FLASK_ENV=production
      - GUNICORN_CMD_ARGS="--workers=3 --worker-class=sync --timeout=30 --keep-alive=2"
    volumes:
      - static_volume:/app/static:ro
      - media_volume:/app/uploads
      - /app/node_modules  # Anonymous volume for node_modules
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    <<: *common-config
    image: postgres:13-alpine
    container_name: unus_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    <<: *common-config
    image: redis:6-alpine
    container_name: unus_redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery_worker:
    <<: *common-config
    image: mjsaintjour/unus:${APP_VERSION:-latest}
    container_name: unus_celery
    command: celery -A app.celery worker --loglevel=info --concurrency=2 --max-tasks-per-child=100
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - C_FORCE_ROOT=false
    volumes:
      - media_volume:/app/uploads
      - /app/node_modules  # Anonymous volume for node_modules
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs:ro
      - nginx_vhost:/etc/nginx/vhost.d:ro
      - nginx_html:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - unus_network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: nginx-proxy-acme
    volumes_from:
      - nginx-proxy:ro
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - acme:/etc/acme.sh
      - nginx_certs:/etc/nginx/certs:rw
    environment:
      - DEFAULT_EMAIL=${SSL_EMAIL}
    depends_on:
      - nginx-proxy
    security_opt:
      - no-new-privileges:true

# Volume Definitions
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  nginx_certs:
  nginx_vhost:
  nginx_html:
  acme:

# Network Definitions
networks:
  unus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16






